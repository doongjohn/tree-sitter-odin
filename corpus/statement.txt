================================================================================
block
================================================================================

{}
{{}}
{
}
{

{{}}

}

--------------------------------------------------------------------------------

(source_file
  (block_statement)
  (block_statement
    (block_statement))
  (block_statement)
  (block_statement
    (block_statement
      (block_statement))))

================================================================================
foreign block
================================================================================

@(default_calling_convention = "std")
foreign kernel32 {
    @(link_name="LoadLibraryA") load_library_a :: proc(c_str: ^u8) -> Hmodule ---
}

--------------------------------------------------------------------------------

(source_file
  (attribute_declaration
    (keyword)
    (operator)
    (interpreted_string_literal))
  (foreign_block
    (keyword)
    (identifier)
    (block_statement
      (attribute_declaration
        (keyword)
        (operator)
        (interpreted_string_literal))
      (const_declaration
        (identifier_list
          (identifier))
        (operator)
        (operator)
        (expression_list
          (proc_definition
            (keyword)
            (parameters
              (parameter_declaration
                (identifier)
                (operator)
                (type_pointer
                  (operator)
                  (type_identifier))))
            (operator)
            (proc_result
              (type_identifier))
            (undefined_value)))))))

================================================================================
assignment
================================================================================

a = 10
a, b = 10, 20
a^ = 10
a, b^ = 10, 20

--------------------------------------------------------------------------------

(source_file
  (assignment_statement
    (identifier_list
      (identifier))
    (operator)
    (expression_list
      (int_literal)))
  (assignment_statement
    (identifier_list
      (identifier)
      (identifier))
    (operator)
    (expression_list
      (int_literal)
      (int_literal)))
  (assignment_statement
    (identifier_list
      (dereference_expression
        (identifier)
        (operator)))
    (operator)
    (expression_list
      (int_literal)))
  (assignment_statement
    (identifier_list
      (identifier)
      (dereference_expression
        (identifier)
        (operator)))
    (operator)
    (expression_list
      (int_literal)
      (int_literal))))

================================================================================
return statement
================================================================================

test :: proc() { return }
test :: proc() {
  return
}
test :: proc() {
  return 10
}
test :: proc() {
  return x * y
}

--------------------------------------------------------------------------------

(source_file
  (const_declaration
    (identifier_list
      (identifier))
    (operator)
    (operator)
    (expression_list
      (proc_definition
        (keyword)
        (parameters)
        (block_statement
          (return_statement
            (keyword))))))
  (const_declaration
    (identifier_list
      (identifier))
    (operator)
    (operator)
    (expression_list
      (proc_definition
        (keyword)
        (parameters)
        (block_statement
          (return_statement
            (keyword))))))
  (const_declaration
    (identifier_list
      (identifier))
    (operator)
    (operator)
    (expression_list
      (proc_definition
        (keyword)
        (parameters)
        (block_statement
          (return_statement
            (keyword)
            (expression_list
              (int_literal)))))))
  (const_declaration
    (identifier_list
      (identifier))
    (operator)
    (operator)
    (expression_list
      (proc_definition
        (keyword)
        (parameters)
        (block_statement
          (return_statement
            (keyword)
            (expression_list
              (binary_expression
                (identifier)
                (identifier)))))))))
