================================================================================
block
================================================================================

{}
{{}}
{
}
{

{{}}

}

--------------------------------------------------------------------------------

(source_file
  (block_statement)
  (block_statement
    (block_statement))
  (block_statement)
  (block_statement
    (block_statement
      (block_statement))))

================================================================================
foreign block
================================================================================

@(default_calling_convention = "std")
foreign kernel32 {
    @(link_name="LoadLibraryA") load_library_a :: proc(c_str: ^u8) -> Hmodule ---
    @(link_name="LoadLibraryB") load_library_b :: proc(c_str: ^u8) -> Hmodule ---
}

--------------------------------------------------------------------------------

(source_file
  (attribute_declaration
    (keyword)
    (operator)
    (interpreted_string_literal))
  (foreign_block
    (keyword)
    (identifier)
    (block_statement
      (attribute_declaration
        (keyword)
        (operator)
        (interpreted_string_literal))
      (const_declaration
        (identifier_list
          (identifier))
        (operator)
        (operator)
        (expression_type_list
          (proc_literal
            (keyword)
            (parameters
              (parameter_declaration
                (identifier)
                (operator)
                (type_pointer
                  (operator)
                  (type_identifier))))
            (operator)
            (proc_result
              (type_identifier))
            (undefined_value))))
      (attribute_declaration
        (keyword)
        (operator)
        (interpreted_string_literal))
      (const_declaration
        (identifier_list
          (identifier))
        (operator)
        (operator)
        (expression_type_list
          (proc_literal
            (keyword)
            (parameters
              (parameter_declaration
                (identifier)
                (operator)
                (type_pointer
                  (operator)
                  (type_identifier))))
            (operator)
            (proc_result
              (type_identifier))
            (undefined_value)))))))

================================================================================
assignment
================================================================================

{
  a, b = 10, 10
  a^, b = 1, 2
}

--------------------------------------------------------------------------------

(source_file
  (block_statement
    (assignment_statement
      (expression_list
        (identifier)
        (identifier))
      (operator)
      (expression_type_list
        (int_literal)
        (int_literal)))
    (assignment_statement
      (expression_list
        (dereference_expression
          (identifier)
          (operator))
        (identifier))
      (operator)
      (expression_type_list
        (int_literal)
        (int_literal)))))

================================================================================
return statement
================================================================================

test :: proc() { return }
test :: proc() {
  return
}
test :: proc() {
  return 10
}
test :: proc() {
  return x * y
}

--------------------------------------------------------------------------------

(source_file
  (const_declaration
    (identifier_list
      (identifier))
    (operator)
    (operator)
    (expression_type_list
      (proc_literal
        (keyword)
        (parameters)
        (block_statement
          (return_statement
            (keyword))))))
  (const_declaration
    (identifier_list
      (identifier))
    (operator)
    (operator)
    (expression_type_list
      (proc_literal
        (keyword)
        (parameters)
        (block_statement
          (return_statement
            (keyword))))))
  (const_declaration
    (identifier_list
      (identifier))
    (operator)
    (operator)
    (expression_type_list
      (proc_literal
        (keyword)
        (parameters)
        (block_statement
          (return_statement
            (keyword)
            (expression_type_list
              (int_literal)))))))
  (const_declaration
    (identifier_list
      (identifier))
    (operator)
    (operator)
    (expression_type_list
      (proc_literal
        (keyword)
        (parameters)
        (block_statement
          (return_statement
            (keyword)
            (expression_type_list
              (binary_expression
                (identifier)
                (operator)
                (identifier)))))))))

================================================================================
selector assignment
================================================================================

{
  frog.x = 123
  hello.world.hi = "wow"
}

--------------------------------------------------------------------------------

(source_file
  (block_statement
    (assignment_statement
      (expression_list
        (selector_expression
          (identifier)
          (identifier)))
      (operator)
      (expression_type_list
        (int_literal)))
    (assignment_statement
      (expression_list
        (selector_expression
          (selector_expression
            (identifier)
            (identifier))
          (identifier)))
      (operator)
      (expression_type_list
        (interpreted_string_literal)))))

================================================================================
call statement
================================================================================

{
  hello()
}

--------------------------------------------------------------------------------

(source_file
  (block_statement
    (call_statement
      (identifier)
      (arguments))))

================================================================================
defer statement
================================================================================

{
  defer hello()
  defer {
    a := 10
  }
}

--------------------------------------------------------------------------------

(source_file
  (block_statement
    (defer_statement
      (keyword)
      (call_statement
        (identifier)
        (arguments)))
    (defer_statement
      (keyword)
      (block_statement
        (var_declaration
          (identifier_list
            (identifier))
          (operator)
          (operator)
          (expression_type_list
            (int_literal)))))))

================================================================================
for basic
================================================================================

{
  for i := 0; i < 10; i += 1 { }
  for i := 0; i < 10; i += 1 do single_statement()
  for i, j := 0, 0; b(); { b(); i += 1; j += 1 } { }
}

--------------------------------------------------------------------------------

(source_file
  (block_statement
    (for_statement
      (keyword)
      (var_declaration
        (identifier_list
          (identifier))
        (operator)
        (operator)
        (expression_type_list
          (int_literal)))
      (binary_expression
        (identifier)
        (operator)
        (int_literal))
      (assignment_operation_statement
        (identifier)
        (operator)
        (int_literal))
      (block_statement))
    (for_statement
      (keyword)
      (var_declaration
        (identifier_list
          (identifier))
        (operator)
        (operator)
        (expression_type_list
          (int_literal)))
      (binary_expression
        (identifier)
        (operator)
        (int_literal))
      (assignment_operation_statement
        (identifier)
        (operator)
        (int_literal))
      (do_statement
        (keyword)
        (call_statement
          (identifier)
          (arguments))))
    (for_statement
      (keyword)
      (var_declaration
        (identifier_list
          (identifier)
          (identifier))
        (operator)
        (operator)
        (expression_type_list
          (int_literal)
          (int_literal)))
      (call_expression
        (identifier)
        (arguments))
      (block_statement
        (call_statement
          (identifier)
          (arguments))
        (assignment_operation_statement
          (identifier)
          (operator)
          (int_literal))
        (assignment_operation_statement
          (identifier)
          (operator)
          (int_literal)))
      (block_statement))))

================================================================================
for ranged
================================================================================

{
  for i in 0..<10 { }
  for i in 0..=9 { }
  /* for character in some_string { } */
}

--------------------------------------------------------------------------------

(source_file
  (block_statement
    (for_statement
      (keyword)
      (identifier)
      (keyword)
      (range_expression
        (int_literal)
        (int_literal))
      (block_statement))
    (for_statement
      (keyword)
      (identifier)
      (keyword)
      (range_expression
        (int_literal)
        (int_literal))
      (block_statement))
    (block_comment)))
