================================================================================
empty
================================================================================

--------------------------------------------------------------------------------

(source_file)

================================================================================
comment
================================================================================

// wow
// hey

/**/
/*/**/*/
/*asd/*asd*/asd*/

/*
  hello
    /*
      nested
    */
*/

--------------------------------------------------------------------------------

(source_file
  (line_comment)
  (line_comment)
  (block_comment)
  (block_comment)
  (block_comment)
  (block_comment))

================================================================================
attribute
================================================================================

@(require)
@(objc_type = Some_Type)

@(private)
my_variable: int

@(private="file")
my_variable: int

--------------------------------------------------------------------------------

(source_file
  (attribute_declaration
    (keyword))
  (attribute_declaration
    (keyword)
    (operator)
    (type_identifier))
  (attribute_declaration
    (keyword))
  (var_declaration
    (identifier_list
      (identifier))
    (operator)
    (type_identifier))
  (attribute_declaration
    (keyword)
    (operator)
    (interpreted_string_literal))
  (var_declaration
    (identifier_list
      (identifier))
    (operator)
    (type_identifier)))

================================================================================
multiline statement
================================================================================

test :: proc() -> int {
  return \
    10
}

--------------------------------------------------------------------------------

(source_file
  (const_declaration
    (identifier_list
      (identifier))
    (operator)
    (operator)
    (expression_type_list
      (proc_literal
        (keyword)
        (parameters)
        (operator)
        (proc_result
          (type_identifier))
        (block_statement
          (return_statement
            (keyword)
            (expression_type_list
              (int_literal))))))))

================================================================================
type cast
================================================================================

{
  a := int(Direction.North) == 0
  y: int = auto_cast x
  f := cast(f64)i
  u := transmute(u32)f
}

--------------------------------------------------------------------------------

(source_file
  (block_statement
    (var_declaration
      (identifier_list
        (identifier))
      (operator)
      (operator)
      (expression_type_list
        (binary_expression
          (type_conversion_expression
            (type_identifier)
            (enum_selector_expression
              (type_identifier)
              (enum_field)))
          (operator)
          (int_literal))))
    (var_declaration
      (identifier_list
        (identifier))
      (operator)
      (type_identifier)
      (operator)
      (expression_type_list
        (auto_cast_expression
          (operator)
          (identifier))))
    (var_declaration
      (identifier_list
        (identifier))
      (operator)
      (operator)
      (expression_type_list
        (cast_expression
          (operator)
          (type_identifier)
          (identifier))))
    (var_declaration
      (identifier_list
        (identifier))
      (operator)
      (operator)
      (expression_type_list
        (transmute_expression
          (operator)
          (type_identifier)
          (identifier))))))

================================================================================
type assert
================================================================================

a := v.(string)

--------------------------------------------------------------------------------

(source_file
  (var_declaration
    (identifier_list
      (identifier))
    (operator)
    (operator)
    (expression_type_list
      (type_assert_expression
        (identifier)
        (type_identifier)))))

================================================================================
optional check
================================================================================

a := v.? or_else 123

--------------------------------------------------------------------------------

(source_file
  (var_declaration
    (identifier_list
      (identifier))
    (operator)
    (operator)
    (expression_type_list
      (or_else_expression
        (optional_check_expression
          (identifier))
        (keyword)
        (int_literal)))))
