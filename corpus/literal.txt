================================================================================
string
================================================================================

a := "asd\n"
b := "C:\\Windows\\notepad.exe"
c := `C:\Windows\notepad.exe`

--------------------------------------------------------------------------------

(source_file
  (var_declaration
    (identifier_list
      (identifier))
    (operator)
    (operator)
    (expression_type_list
      (interpreted_string_literal
        (escape_sequence))))
  (var_declaration
    (identifier_list
      (identifier))
    (operator)
    (operator)
    (expression_type_list
      (interpreted_string_literal
        (escape_sequence)
        (escape_sequence))))
  (var_declaration
    (identifier_list
      (identifier))
    (operator)
    (operator)
    (expression_type_list
      (raw_string_literal))))

================================================================================
array
================================================================================

x := [5]int{1, 2, 3, 4, 5}
x := [?]int{1, 2, 3, 4, 5}
x := Vector3{2, 4, 8}

--------------------------------------------------------------------------------

(source_file
  (var_declaration
    (identifier_list
      (identifier))
    (operator)
    (operator)
    (expression_type_list
      (fixed_array_literal
        (int_literal)
        (type_identifier)
        (int_literal)
        (int_literal)
        (int_literal)
        (int_literal)
        (int_literal))))
  (var_declaration
    (identifier_list
      (identifier))
    (operator)
    (operator)
    (expression_type_list
      (fixed_array_literal
        (keyword)
        (type_identifier)
        (int_literal)
        (int_literal)
        (int_literal)
        (int_literal)
        (int_literal))))
  (var_declaration
    (identifier_list
      (identifier))
    (operator)
    (operator)
    (expression_type_list
      (initializer_literal
        (type_identifier)
        (int_literal)
        (int_literal)
        (int_literal)))))

================================================================================
struct
================================================================================

A : typeid : struct {
  a: f32,
  b: int,
}

B :: struct {
  a: f32
}

C :: struct {
  a, b, c: f32
}

hi := Vector{ 1, 2, 3 }
hi := Vector{
  1,
  2,
  3,
}
hi := Vector{
  x=1,
  y=2,
  z=3,
}

--------------------------------------------------------------------------------

(source_file
  (const_declaration
    (identifier_list
      (const_identifier))
    (operator)
    (type_identifier)
    (operator)
    (expression_type_list
      (type_value_struct
        (keyword)
        (type_value_struct_field
          (identifier_list
            (identifier))
          (operator)
          (type_identifier))
        (type_value_struct_field
          (identifier_list
            (identifier))
          (operator)
          (type_identifier)))))
  (const_declaration
    (identifier_list
      (const_identifier))
    (operator)
    (operator)
    (expression_type_list
      (type_value_struct
        (keyword)
        (type_value_struct_field
          (identifier_list
            (identifier))
          (operator)
          (type_identifier)))))
  (const_declaration
    (identifier_list
      (const_identifier))
    (operator)
    (operator)
    (expression_type_list
      (type_value_struct
        (keyword)
        (type_value_struct_field
          (identifier_list
            (identifier)
            (identifier)
            (identifier))
          (operator)
          (type_identifier)))))
  (var_declaration
    (identifier_list
      (identifier))
    (operator)
    (operator)
    (expression_type_list
      (initializer_literal
        (type_identifier)
        (int_literal)
        (int_literal)
        (int_literal))))
  (var_declaration
    (identifier_list
      (identifier))
    (operator)
    (operator)
    (expression_type_list
      (initializer_literal
        (type_identifier)
        (int_literal)
        (int_literal)
        (int_literal))))
  (var_declaration
    (identifier_list
      (identifier))
    (operator)
    (operator)
    (expression_type_list
      (struct_literal
        (type_identifier)
        (identifier)
        (int_literal)
        (identifier)
        (int_literal)
        (identifier)
        (int_literal)))))

================================================================================
union
================================================================================

A :: union {
  f32,
  int,
}

B :: union #no_nil {
  f32
}

--------------------------------------------------------------------------------

(source_file
  (const_declaration
    (identifier_list
      (const_identifier))
    (operator)
    (operator)
    (expression_type_list
      (type_value_union
        (keyword)
        (type_value_union_field
          (type_identifier))
        (type_value_union_field
          (type_identifier)))))
  (const_declaration
    (identifier_list
      (const_identifier))
    (operator)
    (operator)
    (expression_type_list
      (type_value_union
        (keyword)
        (union_tag
          (tag))
        (type_value_union_field
          (type_identifier))))))

================================================================================
enum
================================================================================

Direction :: enum{North, East, South, West}

Foo :: enum u32 {
	A,
	B = 4,
	C = 7,
	D = 1337,
}

--------------------------------------------------------------------------------

(source_file
  (const_declaration
    (identifier_list
      (type_identifier))
    (operator)
    (operator)
    (expression_type_list
      (type_value_enum
        (keyword)
        (type_value_enum_field
          (enum_field))
        (type_value_enum_field
          (enum_field))
        (type_value_enum_field
          (enum_field))
        (type_value_enum_field
          (enum_field)))))
  (const_declaration
    (identifier_list
      (type_identifier))
    (operator)
    (operator)
    (expression_type_list
      (type_value_enum
        (keyword)
        (type_identifier)
        (type_value_enum_field
          (enum_field))
        (type_value_enum_field
          (enum_field)
          (operator)
          (int_literal))
        (type_value_enum_field
          (enum_field)
          (operator)
          (int_literal))
        (type_value_enum_field
          (enum_field)
          (operator)
          (int_literal))))))
